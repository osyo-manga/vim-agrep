" ___vital___
" NOTE: lines between '" ___vital___' is generated by :Vitalize.
" Do not mofidify the code nor insert new lines before '" ___vital___'
if v:version > 703 || v:version == 703 && has('patch1170')
  function! vital#_agrep#Branc#Timer#import() abort
    return map({'start': '', 'new': '', 'stop': '', 'stop_all': '', 'make': ''},  'function("s:" . v:key)')
  endfunction
else
  function! s:_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')
  endfunction
  execute join(['function! vital#_agrep#Branc#Timer#import() abort', printf("return map({'start': '', 'new': '', 'stop': '', 'stop_all': '', 'make': ''}, \"function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")
  delfunction s:_SID
endif
" ___vital___
scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim


function! s:_error(msg)
	echohl ErrorMsg
	echom "Error vital-branc-timer:" a:msg
	echohl NONE
endfunction


let s:timer = {}

function! s:timer.__callback(timer)
	if !has_key(self, "_callback")
		return
	endif
	try
		return self._callback(a:timer)
	catch
		call self._exception("_callback", v:exception . " " . v:throwpoint)
	endtry
endfunction


function! s:timer._exception(point, exp)
	call self.stop()
	return s:_error(a:exp . " in " . a:point)
endfunction


function! s:timer.stop()
	if self.__is_running()
		call s:stop(self.__id)
		unlet self.__id
	endif
	return self
endfunction


function! s:timer.__is_running()
	return has_key(self, "__id")
endfunction


function! s:timer.__is_stop()
	return !self.__is_running()
endfunction


function! s:timer.start(time, ...)
	call self.stop()

	if a:0 == 0
		let self.__id = timer_start(a:time, self.__callback)
	elseif a:0 == 1 && type(a:1) == type({})
		let self.__id = timer_start(a:time, self.__callback, a:1)
	elseif a:0 == 1 && type(a:1) == type()
		let self.__id = timer_start(a:time, self.__callback)
		let self._callback = a:1
	elseif a:0 == 2
		let self.__id = timer_start(a:time, self.__callback, a:2)
		let self._callback = a:1
	endif
	return self
endfunction


let s:timers = []
function! s:stop_all()
	for timer in s:timers
		call timer.stop()
	endfor
	let s:timers = []
endfunction


function! s:new(...)
	let timer = deepcopy(s:timer)
	call extend(timer, get(a:, 1, {}))
	let s:timers += [timer]
	return timer
endfunction


function! s:make(timer)
	let timer = s:new()
	let timer.__id = a:timer
	return timer
endfunction


function! s:start(...)
	let timer = s:new()
	call call(timer.start, a:000, timer)
	return timer
endfunction


function! s:stop(timer)
	let stop = { "timer" : a:timer}
	function! stop.call(...)
		return timer_stop(self.timer)
	endfunction
	return timer_start(0, stop.call)
endfunction


let &cpo = s:save_cpo
unlet s:save_cpo
