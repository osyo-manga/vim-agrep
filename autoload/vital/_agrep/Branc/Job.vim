" ___vital___
" NOTE: lines between '" ___vital___' is generated by :Vitalize.
" Do not mofidify the code nor insert new lines before '" ___vital___'
if v:version > 703 || v:version == 703 && has('patch1170')
  function! vital#_agrep#Branc#Job#import() abort
    return map({'start': '', 'new': ''},  'function("s:" . v:key)')
  endfunction
else
  function! s:_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')
  endfunction
  execute join(['function! vital#_agrep#Branc#Job#import() abort', printf("return map({'start': '', 'new': ''}, \"function('<SNR>%s_' . v:key)\")", s:_SID()), 'endfunction'], "\n")
  delfunction s:_SID
endif
" ___vital___
scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim


function! s:_error(msg)
	echohl ErrorMsg
	echom "Error vital-branc-job" a:msg
	echohl NONE
endfunction


let s:job = {}


function! s:job.__send_callback(name, ...)
	try
		if has_key(self, a:name)
			return call(self[a:name], a:000)
		elseif a:name == "_out_cb" || a:name == "_err_cb"
			return call(self.__send_callback, ["_callback"] + a:000)
		endif
	catch
		call self._exception("_callback", v:exception . " " . v:throwpoint)
	endtry
endfunction


function! s:job._exception(point, exp)
	call self.stop()
	return s:_error(a:exp . " in " . a:point)
endfunction


function! s:job.__callback_options()
	let callbacks = [
	\	"callback",
	\	"out_cb",
	\	"err_cb",
	\	"close_cb",
	\	"exit_cb",
	\]

	let options = {}
	for callback in callbacks
		let options[callback] = function(self.__send_callback, ["_" . callback], self)
	endfor
	return options
endfunction


function! s:job.start(command, ...)
	call self.stop()
	let options = get(a:, 1, {})
	let self.__id = job_start(a:command, extend(self.__callback_options(), options))
	return self
endfunction


function! s:job.stop(...)
	if !self.is_run()
		return
	endif
	if a:0 == 0
		return job_stop(self.__id)
	else
		return job_stop(self.__id, a:1)
	endif
	return self
endfunction


function! s:job.status()
	return has_key(self, "__id") ? job_status(self.__id) : ""
endfunction


function! s:job.is_run()
	return self.status() == "run"
endfunction


function! s:job.is_fail()
	return self.status() == "fail"
endfunction


function! s:job.is_dead()
	return self.status() == "dead"
endfunction


function! s:new(...)
	let job = deepcopy(s:job)
	return job
endfunction


function! s:start(...)
	let job = s:new()
	return call(job.start, a:000, job)
endfunction


let &cpo = s:save_cpo
unlet s:save_cpo
